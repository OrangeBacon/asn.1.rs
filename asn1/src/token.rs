/// The kind of a lexed token
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum TokenKind {
    // Comments
    SingleComment,
    MultiComment,

    // Single character tokens
    LeftCurly,
    RightCurly,
    Less,
    Greater,
    Comma,
    Dot,
    ForwardSlash,
    LeftParen,
    RightParen,
    LeftSquare,
    RightSquare,
    Hyphen,
    Colon,
    Equals,
    SemiColon,
    At,
    Pipe,
    Exclamation,
    Caret,
    Underscore,

    // Multi-character tokens
    Assignment,
    XMLEndTag,
    XMLSingleTagEnd,
    Ellipsis,
    VersionOpen,
    VersionClose,

    // Compound tokens
    ValueRefOrIdent,
    TypeOrModuleRef,
    Number,
    CString,
    BHString,
    XMLData,
    ValueField,
    TypeField,

    // Keywords
    // "ABSENT",
    KwAbstractSyntax,
    KwAll,
    KwApplication,
    KwAutomatic,
    KwBegin,
    KwBit,
    KwBmpString,
    KwBoolean,
    // "BY",
    KwCharacter,
    KwChoice,
    KwClass,
    // "COMPONENT",
    KwComponents,
    // "CONSTRAINED",
    KwContaining,
    KwDate,
    KwDateTime,
    KwDefault,
    KwDefinitions,
    KwDuration,
    KwEmbedded,
    // "ENCODED",
    KwEncodingControl,
    KwEnd,
    KwEnumerated,
    // "EXCEPT",
    KwExplicit,
    KwExports,
    KwExtensibility,
    KwExternal,
    KwFalse,
    KwFrom,
    KwGeneralizedTime,
    KwGeneralString,
    KwGraphicString,
    KwIA5String,
    KwIdentifier,
    KwImplicit,
    KwImplied,
    KwImports,
    // "INCLUDES",
    KwInstance,
    KwInstructions,
    KwInteger,
    // "INTERSECTION",
    KwISO64String,
    // "MAX",
    // "MIN",
    KwMinusInfinity,
    KwNotANumber,
    KwNull,
    KwNumericString,
    KwObject,
    KwObjectDescriptor,
    KwOctet,
    KwOf,
    KwOidIri,
    KwOptional,
    // "PATTERN",
    KwPDV,
    KwPlusInfinity,
    // "PRESENT",
    KwPrintableString,
    KwPrivate,
    KwReal,
    KwRelativeOid,
    KwRelativeOidIri,
    KwSequence,
    KwSet,
    // "SETTINGS",
    // "SIZE",
    KwString,
    KwSyntax,
    KwT61String,
    KwTags,
    KwTeletexString,
    KwTime,
    KwTimeOfDay,
    KwTrue,
    KwTypeIdentifier,
    // "UNION",
    KwUnique,
    KwUniversal,
    KwUniversalString,
    KwUTCTime,
    KwUTF8String,
    KwVideotexString,
    KwVisibleString,
    KwWith,
}

/// Data relating to a single lexed token
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct Token {
    /// The type of this token
    pub(crate) kind: TokenKind,

    /// The byte length of the source of the token in its source file.
    pub(crate) length: usize,

    /// Byte offset into the file that the token starts at.  The end location
    /// can be derived from this offset + the length of the value string.
    pub(crate) offset: usize,

    /// The file ID of the file the token was lexed from
    pub(crate) file: usize,
}

/// String/Enum mapping for keywords
pub const KEYWORD_DATA: [(&str, TokenKind); 76] = [
    // "ABSENT",
    ("ABSTRACT-SYNTAX", TokenKind::KwAbstractSyntax),
    ("ALL", TokenKind::KwAll),
    ("APPLICATION", TokenKind::KwApplication),
    ("AUTOMATIC", TokenKind::KwAutomatic),
    ("BEGIN", TokenKind::KwBegin),
    ("BIT", TokenKind::KwBit),
    ("BMPString", TokenKind::KwBmpString),
    ("BOOLEAN", TokenKind::KwBoolean),
    // "BY",
    ("CHARACTER", TokenKind::KwCharacter),
    ("CHOICE", TokenKind::KwChoice),
    ("CLASS", TokenKind::KwClass),
    // "COMPONENT",
    ("COMPONENTS", TokenKind::KwComponents),
    // "CONSTRAINED",
    ("CONTAINING", TokenKind::KwContaining),
    ("DATE", TokenKind::KwDate),
    ("DATE-TIME", TokenKind::KwDateTime),
    ("DEFAULT", TokenKind::KwDefault),
    ("DEFINITIONS", TokenKind::KwDefinitions),
    ("DURATION", TokenKind::KwDuration),
    ("EMBEDDED", TokenKind::KwEmbedded),
    // "ENCODED",
    ("ENCODING-CONTROL", TokenKind::KwEncodingControl),
    ("END", TokenKind::KwEnd),
    ("ENUMERATED", TokenKind::KwEnumerated),
    // "EXCEPT",
    ("EXPLICIT", TokenKind::KwExplicit),
    ("EXPORTS", TokenKind::KwExports),
    ("EXTENSIBILITY", TokenKind::KwExtensibility),
    ("EXTERNAL", TokenKind::KwExternal),
    ("FALSE", TokenKind::KwFalse),
    ("FROM", TokenKind::KwFrom),
    ("GeneralizedTime", TokenKind::KwGeneralizedTime),
    ("GeneralString", TokenKind::KwGeneralString),
    ("GraphicString", TokenKind::KwGraphicString),
    ("IA5String", TokenKind::KwIA5String),
    ("IDENTIFIER", TokenKind::KwIdentifier),
    ("IMPLICIT", TokenKind::KwImplicit),
    ("IMPLIED", TokenKind::KwImplied),
    ("IMPORTS", TokenKind::KwImports),
    // "INCLUDES",
    ("INSTANCE", TokenKind::KwInstance),
    ("INSTRUCTIONS", TokenKind::KwInstructions),
    ("INTEGER", TokenKind::KwInteger),
    // "INTERSECTION",
    ("ISO646String", TokenKind::KwISO64String),
    // "MAX",
    // "MIN",
    ("MINUS-INFINITY", TokenKind::KwMinusInfinity),
    ("NOT-A-NUMBER", TokenKind::KwNotANumber),
    ("NULL", TokenKind::KwNull),
    ("NumericString", TokenKind::KwNumericString),
    ("OBJECT", TokenKind::KwObject),
    ("ObjectDescriptor", TokenKind::KwObjectDescriptor),
    ("OCTET", TokenKind::KwOctet),
    ("OF", TokenKind::KwOf),
    ("OID-IRI", TokenKind::KwOidIri),
    ("OPTIONAL", TokenKind::KwOptional),
    // "PATTERN",
    ("PDV", TokenKind::KwPDV),
    ("PLUS-INFINITY", TokenKind::KwPlusInfinity),
    // "PRESENT",
    ("PrintableString", TokenKind::KwPrintableString),
    ("PRIVATE", TokenKind::KwPrivate),
    ("REAL", TokenKind::KwReal),
    ("RELATIVE-OID", TokenKind::KwRelativeOid),
    ("RELATIVE-OID-IRI", TokenKind::KwRelativeOidIri),
    ("SEQUENCE", TokenKind::KwSequence),
    ("SET", TokenKind::KwSet),
    // "SETTINGS",
    // "SIZE",
    ("STRING", TokenKind::KwString),
    ("SYNTAX", TokenKind::KwSyntax),
    ("T61String", TokenKind::KwT61String),
    ("TAGS", TokenKind::KwTags),
    ("TeletexString", TokenKind::KwTeletexString),
    ("TIME", TokenKind::KwTime),
    ("TIME-OF-DAY", TokenKind::KwTimeOfDay),
    ("TRUE", TokenKind::KwTrue),
    ("TYPE-IDENTIFIER", TokenKind::KwTypeIdentifier),
    // "UNION",
    ("UNIQUE", TokenKind::KwUnique),
    ("UNIVERSAL", TokenKind::KwUniversal),
    ("UniversalString", TokenKind::KwUniversalString),
    ("UTCTime", TokenKind::KwUTCTime),
    ("UTF8String", TokenKind::KwUTF8String),
    ("VideotexString", TokenKind::KwVideotexString),
    ("VisibleString", TokenKind::KwVisibleString),
    ("WITH", TokenKind::KwWith),
];
